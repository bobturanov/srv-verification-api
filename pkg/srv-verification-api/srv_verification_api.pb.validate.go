// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ozonmp/srv_verification_api/v1/srv_verification_api.proto

package srv_verification_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Verification with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Verification) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerificationValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VerificationValidationError is the validation error returned by
// Verification.Validate if the designated constraints aren't met.
type VerificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerificationValidationError) ErrorName() string { return "VerificationValidationError" }

// Error satisfies the builtin error interface
func (e VerificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerificationValidationError{}

// Validate checks the field values on DescribeVerificationV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeVerificationV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVerificationId() <= 0 {
		return DescribeVerificationV1RequestValidationError{
			field:  "VerificationId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeVerificationV1RequestValidationError is the validation error
// returned by DescribeVerificationV1Request.Validate if the designated
// constraints aren't met.
type DescribeVerificationV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeVerificationV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeVerificationV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeVerificationV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeVerificationV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeVerificationV1RequestValidationError) ErrorName() string {
	return "DescribeVerificationV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeVerificationV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeVerificationV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeVerificationV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeVerificationV1RequestValidationError{}

// Validate checks the field values on DescribeVerificationV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeVerificationV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeVerificationV1ResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeVerificationV1ResponseValidationError is the validation error
// returned by DescribeVerificationV1Response.Validate if the designated
// constraints aren't met.
type DescribeVerificationV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeVerificationV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeVerificationV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeVerificationV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeVerificationV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeVerificationV1ResponseValidationError) ErrorName() string {
	return "DescribeVerificationV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeVerificationV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeVerificationV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeVerificationV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeVerificationV1ResponseValidationError{}
