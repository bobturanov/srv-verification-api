// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozonmp/srv-verification-api/internal/repo (interfaces: Repo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ozonmp/srv-verification-api/internal/model"
)

// MockRepo is a mock of Repo interface
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddVerification mocks base method
func (m *MockRepo) AddVerification(arg0 context.Context, arg1 *model.Verification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVerification", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVerification indicates an expected call of AddVerification
func (mr *MockRepoMockRecorder) AddVerification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVerification", reflect.TypeOf((*MockRepo)(nil).AddVerification), arg0, arg1)
}

// DescribeVerification mocks base method
func (m *MockRepo) DescribeVerification(arg0 context.Context, arg1 uint64) (*model.Verification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVerification", arg0, arg1)
	ret0, _ := ret[0].(*model.Verification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVerification indicates an expected call of DescribeVerification
func (mr *MockRepoMockRecorder) DescribeVerification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVerification", reflect.TypeOf((*MockRepo)(nil).DescribeVerification), arg0, arg1)
}

// ListVerification mocks base method
func (m *MockRepo) ListVerification(arg0 context.Context) ([]*model.Verification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVerification", arg0)
	ret0, _ := ret[0].([]*model.Verification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVerification indicates an expected call of ListVerification
func (mr *MockRepoMockRecorder) ListVerification(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVerification", reflect.TypeOf((*MockRepo)(nil).ListVerification), arg0)
}

// RemoveVerification mocks base method
func (m *MockRepo) RemoveVerification(arg0 context.Context, arg1 uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVerification", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveVerification indicates an expected call of RemoveVerification
func (mr *MockRepoMockRecorder) RemoveVerification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVerification", reflect.TypeOf((*MockRepo)(nil).RemoveVerification), arg0, arg1)
}
